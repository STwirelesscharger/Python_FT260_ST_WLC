"""
  ******************************************************************************
  * Copyright (c) 2024, STMicroelectronics - All Rights Reserved
  * Author(s): ACD (Analog Custom Devices) Software Team for STMicroelectronics.
  *
  * License terms: BSD 3-clause "New" or "Revised" License.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are met:
  *
  * 1. Redistributions of source code must retain the above copyright notice, this
  * list of conditions and the following disclaimer.
  *
  * 2. Redistributions in binary form must reproduce the above copyright notice,
  * this list of conditions and the following disclaimer in the documentation
  * and/or other materials provided with the distribution.
  *
  * 3. Neither the name of the copyright holder nor the names of its contributors
  * may be used to endorse or promote products derived from this software
  * without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
"""

import driver_ft260
from wlc89_rom3_register import *
#from wlc_print2 import *
import time
#QI 1.3 define
QI13_Head_Digest_Response      = 0x11
QI13_Head_Certificate_Response = 0x12
QI13_Head_Challenge_Response   = 0x13
#QI 1.3 define
QI13_Head_Digest_Request      = 0x19
QI13_Head_Certificate_Request = 0x1A
QI13_Head_Challenge_Request   = 0x1B


i2c = driver_ft260.ft260_dongle()
i2c.wlc89_rom3_info()
def wlc89_rom3_adc():
    vout_meas = i2c.wread16(I2CREG_VOUT_MEAS,2)
    vrect_meas = i2c.wread16(I2CREG_VRECT_MEAS,2)
    icur_meas = i2c.wread16(I2CREG_ICUR_MEAS,2)
    chip_temp = i2c.wread16(I2CREG_CHIP_TEMP_MEAS,2) / 10
    opfreq = i2c.wread16(I2CREG_OP_FREQ,2)
    mode = i2c.wread16(I2CREG_RXOP_MODE)
    print(f"WLC89_ROM3,vrect,{vrect_meas},vout,{vout_meas},curr,{icur_meas},die,{chip_temp},freq,{opfreq}khz,mode,{mode}")
    if(32 == mode):
        print("BPP")
    elif(64 == mode):
        print("EPP")
    elif(32*4 == mode):
        print("MPP")
    return mode
def print_hex(title, _bytes, modulo=8):
    print(title, end='')
    for i in range(0, len(_bytes)):
        print(' 0x{:02X},'.format(_bytes[i]), end='' )
        if(modulo != 0):
            if((i != 0) and ((i+1)%modulo) == 0):
                print()
    if(modulo == 0):
        print(" ... ...")
    elif(len(_bytes) % modulo != 0):
        print()

def wlc89_get_certif(sendMsg = [0X20,4,0,0,0x1A,0,0,0],datalen = 59):
    print_hex("[SEND_MSG]",sendMsg)
    i2c.write16(I2CREG_INTR_CLR,[0xFF]*4)#0x0024
    i2c.write16(0x0800,sendMsg)
    i2c.write16(0x004F,2)#send command
    time.sleep(1)
    for item in range(0,10):
        rx_int = i2c.wread16(I2CREG_INTR_LATCH+1)#read 0X001E
        if(0x03 == rx_int):
            print("[INT] done rx_int = 0x03")
            break
        else:
            print(f"[INT] wait rx_int {rx_int} != 0x03")
            time.sleep(1)
    if(0x03 != rx_int):
        print("[ERR] read time out")
    buff = i2c.wread16(0x0800,4+datalen+1)
    print_hex("[RECV_MSG]",buff)
    if(QI13_Head_Certificate_Response != buff[4]):#0X12
        print("[ERR] Byte[4] != QI13_Head_Certificate_Response")
        return [-1]
    else:
        return buff

total_cert = []#buff
def wlc89_run():
    global total_cert
    #FileOutput_Init()
    mode = wlc89_rom3_adc()
    if(32*4 != mode):
        print("[ERR] RX not in MPP mode")
        return
    print("WLC89 MPP Get Certificate")
    SendMsg = [0X20,4,0,0,0x1A,0,0,4]
    print("[STEP] read Certificate length")
    buff = wlc89_get_certif(SendMsg,4)
    len_cert = buff[5]*256 + buff[6]
    print(f"[STEP] certif_length {len_cert}")
    if(0 == len_cert):
        print("[ERR] certif_length IS 0")
        return
    split_size_cert = 59
    print(f"split_size_cert use {split_size_cert+1}")
    send_div = int(len_cert / split_size_cert)
    send_last = len_cert % split_size_cert
    index = 0 #
    LengthA8 = 0 ; #fix
    SlotNumber = 0 #fix
    OffsetA8 = 0; Offset70 = 0;
    remaining = len_cert
    while(index <= send_div):
        print("[STEP] index: {}/{}".format(index, send_div), "\t remaining: {} bytes".format(remaining))
        offset_sum = index * split_size_cert
        if(offset_sum >= split_size_cert):
            OffsetA8 = int(offset_sum/256)
            Offset70 = offset_sum % 256
        B1 = (OffsetA8 <<5) | (LengthA8 <<2) | SlotNumber
        B2 = Offset70
        if((index == send_div) & (send_last != 0)):#last
            B3 = send_last
        else:
            B3 = split_size_cert
        index += 1
        remaining = remaining - split_size_cert - 1
        SendMsg = [0X20,4,0,0,0x1A,B1,B2,B3]
        buff = wlc89_get_certif(SendMsg,B3)
        if([-1] == buff):
            return 0
        else:
            total_cert += buff[5:]
    return len_cert

len_cert = wlc89_run()
if(0 != len_cert):
    total_cert_len = len(total_cert)
    if(len_cert != total_cert_len):
        print("len_cert != total_cert_len")
    print_hex("total_certif",total_cert)

"""
test log
WLC89_ROM3,vrect,12728,vout,11997,curr,65,die,53.7,freq,361khz,mode,128
MPP
WLC89 MPP Get Certificate
[STEP] read Certificate length
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x04,
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x05, 0x00, 0x00, 0x12, 0x02, 0xBC, 0xA1,
 0x75,
[STEP] certif_length 700
split_size_cert use 60
[STEP] index: 0/11 	 remaining: 700 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0x00, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x02, 0xBC, 0xA1,
 0x75, 0x9E, 0xCC, 0xA0, 0xBE, 0x3B, 0x85, 0x01,
 0x18, 0x18, 0x3E, 0xD6, 0xCD, 0xD6, 0xD4, 0xA5,
 0xDB, 0x7D, 0x83, 0xE6, 0xFD, 0x0E, 0x6F, 0x47,
 0x5C, 0xE4, 0xBB, 0x6E, 0xA0, 0x14, 0x24, 0x30,
 0x82, 0x01, 0x44, 0x30, 0x81, 0xEB, 0xA0, 0x03,
 0x02, 0x01, 0x02, 0x02, 0x08, 0x79, 0x14, 0x67,
 0x59, 0xCD, 0x80, 0xCF, 0xCB, 0x30, 0x0A, 0x06,
[STEP] index: 1/11 	 remaining: 640 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0x3B, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x08, 0x2A, 0x86,
 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30, 0x11,
 0x31, 0x0F, 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04,
 0x03, 0x0C, 0x06, 0x57, 0x50, 0x43, 0x43, 0x41,
 0x31, 0x30, 0x20, 0x17, 0x0D, 0x32, 0x33, 0x31,
 0x31, 0x32, 0x34, 0x31, 0x30, 0x31, 0x38, 0x35,
 0x38, 0x5A, 0x18, 0x0F, 0x39, 0x39, 0x39, 0x39,
 0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x35, 0x39,
[STEP] index: 2/11 	 remaining: 580 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0x76, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x35, 0x39, 0x5A,
 0x30, 0x12, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03,
 0x55, 0x04, 0x03, 0x0C, 0x07, 0x30, 0x31, 0x34,
 0x36, 0x2D, 0x41, 0x30, 0x30, 0x59, 0x30, 0x13,
 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x02,
 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04, 0xD3,
 0xCD, 0xF6, 0x77, 0xEC, 0x79, 0xAE, 0x48, 0x3E,
[STEP] index: 3/11 	 remaining: 520 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0xB1, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x01, 0xC4, 0x38,
 0xCB, 0xD6, 0x1B, 0x8A, 0x7C, 0x4B, 0xC6, 0xE6,
 0xC9, 0xB4, 0x9A, 0x95, 0xC5, 0x45, 0x6F, 0xDB,
 0xD4, 0x2C, 0xA8, 0x7C, 0xFF, 0x1A, 0x07, 0xCA,
 0x75, 0x90, 0x71, 0x08, 0xE3, 0x0A, 0x42, 0x96,
 0x3E, 0xA3, 0x53, 0x19, 0xB0, 0x4D, 0x83, 0x75,
 0xFB, 0x57, 0xC5, 0x62, 0x58, 0xC1, 0xB2, 0xE3,
 0xDE, 0x3B, 0x8E, 0x8B, 0xA3, 0x2A, 0x30, 0x28,
[STEP] index: 4/11 	 remaining: 460 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x00, 0xEC, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x30, 0x12, 0x06,
 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04,
 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01,
 0x00, 0x30, 0x12, 0x06, 0x05, 0x67, 0x81, 0x14,
 0x01, 0x01, 0x01, 0x01, 0xFF, 0x04, 0x06, 0x04,
 0x04, 0x00, 0x00, 0x00, 0x01, 0x30, 0x0A, 0x06,
 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03,
 0x02, 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21,
[STEP] index: 5/11 	 remaining: 400 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x20, 0x27, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x00, 0x8A, 0xEE,
 0xF8, 0xF0, 0x4C, 0x2F, 0xC5, 0xBE, 0xD1, 0xB3,
 0xB0, 0xCA, 0xEC, 0x18, 0x7F, 0xFE, 0xEE, 0x5C,
 0x28, 0x49, 0x96, 0x03, 0x81, 0x66, 0xE6, 0xEA,
 0x80, 0xCC, 0x93, 0x16, 0x19, 0x26, 0x02, 0x20,
 0x2B, 0x28, 0xF5, 0x10, 0x17, 0x36, 0xD9, 0xCD,
 0x28, 0x66, 0xA6, 0xD8, 0x9F, 0x54, 0xE3, 0xEA,
 0xF2, 0xB7, 0xE6, 0x7A, 0xA2, 0xB7, 0xB4, 0x5A,
[STEP] index: 6/11 	 remaining: 340 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x20, 0x62, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x19, 0x19, 0x92,
 0x96, 0x46, 0xD8, 0x67, 0x3F, 0x30, 0x82, 0x01,
 0x4E, 0x30, 0x81, 0xF4, 0xA0, 0x03, 0x02, 0x01,
 0x02, 0x02, 0x03, 0x01, 0x18, 0x21, 0x30, 0x0A,
 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04,
 0x03, 0x02, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0E,
 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x07, 0x30,
 0x31, 0x34, 0x36, 0x2D, 0x41, 0x30, 0x30, 0x1E,
[STEP] index: 7/11 	 remaining: 280 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x20, 0x9D, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x17, 0x0D, 0x32,
 0x33, 0x31, 0x32, 0x32, 0x37, 0x31, 0x36, 0x30,
 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x33, 0x33,
 0x31, 0x32, 0x32, 0x38, 0x31, 0x35, 0x35, 0x39,
 0x35, 0x39, 0x5A, 0x30, 0x33, 0x31, 0x19, 0x30,
 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x10,
 0x30, 0x32, 0x30, 0x34, 0x34, 0x30, 0x2D, 0x46,
 0x58, 0x5F, 0x4D, 0x50, 0x50, 0x32, 0x38, 0x36,
[STEP] index: 8/11 	 remaining: 220 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x20, 0xD8, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x31, 0x16, 0x30,
 0x14, 0x06, 0x0A, 0x09, 0x92, 0x26, 0x89, 0x93,
 0xF2, 0x2C, 0x64, 0x01, 0x01, 0x0C, 0x06, 0x30,
 0x31, 0x34, 0x36, 0x2D, 0x35, 0x30, 0x59, 0x30,
 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE,
 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,
 0x05, 0x61, 0xA0, 0xC0, 0x35, 0x4C, 0x35, 0xF8,
[STEP] index: 9/11 	 remaining: 160 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x40, 0x13, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x4C, 0xAD, 0xCB,
 0x51, 0x00, 0x80, 0xAE, 0x49, 0x5F, 0x60, 0x1E,
 0xE6, 0x99, 0x91, 0x70, 0x9F, 0xD8, 0xAA, 0xB1,
 0x60, 0xF5, 0x8A, 0xE9, 0x80, 0x71, 0x54, 0x96,
 0x37, 0xED, 0x7C, 0x06, 0xFA, 0x66, 0xED, 0xBF,
 0xF3, 0xB5, 0x0F, 0x31, 0x7B, 0x16, 0xDA, 0xFF,
 0x40, 0xC7, 0x68, 0xE5, 0x17, 0x27, 0x83, 0x6C,
 0x47, 0x67, 0xEC, 0xA7, 0x57, 0xA3, 0x18, 0x30,
[STEP] index: 10/11 	 remaining: 100 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x40, 0x4E, 0x3B,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x3C, 0x00, 0x00, 0x12, 0x16, 0x30, 0x14,
 0x06, 0x05, 0x67, 0x81, 0x14, 0x01, 0x02, 0x01,
 0x01, 0xFF, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00,
 0x00, 0x01, 0x18, 0x21, 0x30, 0x0A, 0x06, 0x08,
 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02,
 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21, 0x00,
 0xB1, 0xC0, 0x8E, 0x57, 0xAB, 0xC7, 0x45, 0x34,
 0x80, 0x49, 0x24, 0x2D, 0x5F, 0x59, 0x0B, 0x93,
[STEP] index: 11/11 	 remaining: 40 bytes
[SEND_MSG] 0x20, 0x04, 0x00, 0x00, 0x1A, 0x40, 0x89, 0x33,
[INT] wait rx_int 1 != 0x03
[INT] wait rx_int 1 != 0x03
[INT] done rx_int = 0x03
[RECV_MSG] 0x20, 0x34, 0x00, 0x00, 0x12, 0x72, 0x36, 0x2C,
 0x9C, 0x36, 0x07, 0xF7, 0xB7, 0x39, 0x4B, 0xE7,
 0xA1, 0x76, 0xC0, 0x8B, 0xC1, 0x02, 0x21, 0x00,
 0xA5, 0xA9, 0x58, 0xD9, 0xD5, 0xE4, 0xB5, 0xB9,
 0xA9, 0xA7, 0xD8, 0x73, 0x81, 0x57, 0xF2, 0xF4,
 0x07, 0x1F, 0xA9, 0xEE, 0xE8, 0x91, 0x1A, 0xAA,
 0xD7, 0x41, 0x0D, 0x20, 0x42, 0x28, 0x14, 0xDE,
total_certif 0x02, 0xBC, 0xA1, 0x75, 0x9E, 0xCC, 0xA0, 0xBE,
 0x3B, 0x85, 0x01, 0x18, 0x18, 0x3E, 0xD6, 0xCD,
 0xD6, 0xD4, 0xA5, 0xDB, 0x7D, 0x83, 0xE6, 0xFD,
 0x0E, 0x6F, 0x47, 0x5C, 0xE4, 0xBB, 0x6E, 0xA0,
 0x14, 0x24, 0x30, 0x82, 0x01, 0x44, 0x30, 0x81,
 0xEB, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08,
 0x79, 0x14, 0x67, 0x59, 0xCD, 0x80, 0xCF, 0xCB,
 0x30, 0x0A, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE,
 0x3D, 0x04, 0x03, 0x02, 0x30, 0x11, 0x31, 0x0F,
 0x30, 0x0D, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C,
 0x06, 0x57, 0x50, 0x43, 0x43, 0x41, 0x31, 0x30,
 0x20, 0x17, 0x0D, 0x32, 0x33, 0x31, 0x31, 0x32,
 0x34, 0x31, 0x30, 0x31, 0x38, 0x35, 0x38, 0x5A,
 0x18, 0x0F, 0x39, 0x39, 0x39, 0x39, 0x31, 0x32,
 0x33, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39,
 0x5A, 0x30, 0x12, 0x31, 0x10, 0x30, 0x0E, 0x06,
 0x03, 0x55, 0x04, 0x03, 0x0C, 0x07, 0x30, 0x31,
 0x34, 0x36, 0x2D, 0x41, 0x30, 0x30, 0x59, 0x30,
 0x13, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
 0x02, 0x01, 0x06, 0x08, 0x2A, 0x86, 0x48, 0xCE,
 0x3D, 0x03, 0x01, 0x07, 0x03, 0x42, 0x00, 0x04,
 0xD3, 0xCD, 0xF6, 0x77, 0xEC, 0x79, 0xAE, 0x48,
 0x3E, 0x01, 0xC4, 0x38, 0xCB, 0xD6, 0x1B, 0x8A,
 0x7C, 0x4B, 0xC6, 0xE6, 0xC9, 0xB4, 0x9A, 0x95,
 0xC5, 0x45, 0x6F, 0xDB, 0xD4, 0x2C, 0xA8, 0x7C,
 0xFF, 0x1A, 0x07, 0xCA, 0x75, 0x90, 0x71, 0x08,
 0xE3, 0x0A, 0x42, 0x96, 0x3E, 0xA3, 0x53, 0x19,
 0xB0, 0x4D, 0x83, 0x75, 0xFB, 0x57, 0xC5, 0x62,
 0x58, 0xC1, 0xB2, 0xE3, 0xDE, 0x3B, 0x8E, 0x8B,
 0xA3, 0x2A, 0x30, 0x28, 0x30, 0x12, 0x06, 0x03,
 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x08,
 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00,
 0x30, 0x12, 0x06, 0x05, 0x67, 0x81, 0x14, 0x01,
 0x01, 0x01, 0x01, 0xFF, 0x04, 0x06, 0x04, 0x04,
 0x00, 0x00, 0x00, 0x01, 0x30, 0x0A, 0x06, 0x08,
 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02,
 0x03, 0x48, 0x00, 0x30, 0x45, 0x02, 0x21, 0x00,
 0x8A, 0xEE, 0xF8, 0xF0, 0x4C, 0x2F, 0xC5, 0xBE,
 0xD1, 0xB3, 0xB0, 0xCA, 0xEC, 0x18, 0x7F, 0xFE,
 0xEE, 0x5C, 0x28, 0x49, 0x96, 0x03, 0x81, 0x66,
 0xE6, 0xEA, 0x80, 0xCC, 0x93, 0x16, 0x19, 0x26,
 0x02, 0x20, 0x2B, 0x28, 0xF5, 0x10, 0x17, 0x36,
 0xD9, 0xCD, 0x28, 0x66, 0xA6, 0xD8, 0x9F, 0x54,
 0xE3, 0xEA, 0xF2, 0xB7, 0xE6, 0x7A, 0xA2, 0xB7,
 0xB4, 0x5A, 0x19, 0x19, 0x92, 0x96, 0x46, 0xD8,
 0x67, 0x3F, 0x30, 0x82, 0x01, 0x4E, 0x30, 0x81,
 0xF4, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x03,
 0x01, 0x18, 0x21, 0x30, 0x0A, 0x06, 0x08, 0x2A,
 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x02, 0x30,
 0x12, 0x31, 0x10, 0x30, 0x0E, 0x06, 0x03, 0x55,
 0x04, 0x03, 0x0C, 0x07, 0x30, 0x31, 0x34, 0x36,
 0x2D, 0x41, 0x30, 0x30, 0x1E, 0x17, 0x0D, 0x32,
 0x33, 0x31, 0x32, 0x32, 0x37, 0x31, 0x36, 0x30,
 0x30, 0x30, 0x30, 0x5A, 0x17, 0x0D, 0x33, 0x33,
 0x31, 0x32, 0x32, 0x38, 0x31, 0x35, 0x35, 0x39,
 0x35, 0x39, 0x5A, 0x30, 0x33, 0x31, 0x19, 0x30,
 0x17, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x10,
 0x30, 0x32, 0x30, 0x34, 0x34, 0x30, 0x2D, 0x46,
 0x58, 0x5F, 0x4D, 0x50, 0x50, 0x32, 0x38, 0x36,
 0x31, 0x16, 0x30, 0x14, 0x06, 0x0A, 0x09, 0x92,
 0x26, 0x89, 0x93, 0xF2, 0x2C, 0x64, 0x01, 0x01,
 0x0C, 0x06, 0x30, 0x31, 0x34, 0x36, 0x2D, 0x35,
 0x30, 0x59, 0x30, 0x13, 0x06, 0x07, 0x2A, 0x86,
 0x48, 0xCE, 0x3D, 0x02, 0x01, 0x06, 0x08, 0x2A,
 0x86, 0x48, 0xCE, 0x3D, 0x03, 0x01, 0x07, 0x03,
 0x42, 0x00, 0x04, 0x05, 0x61, 0xA0, 0xC0, 0x35,
 0x4C, 0x35, 0xF8, 0x4C, 0xAD, 0xCB, 0x51, 0x00,
 0x80, 0xAE, 0x49, 0x5F, 0x60, 0x1E, 0xE6, 0x99,
 0x91, 0x70, 0x9F, 0xD8, 0xAA, 0xB1, 0x60, 0xF5,
 0x8A, 0xE9, 0x80, 0x71, 0x54, 0x96, 0x37, 0xED,
 0x7C, 0x06, 0xFA, 0x66, 0xED, 0xBF, 0xF3, 0xB5,
 0x0F, 0x31, 0x7B, 0x16, 0xDA, 0xFF, 0x40, 0xC7,
 0x68, 0xE5, 0x17, 0x27, 0x83, 0x6C, 0x47, 0x67,
 0xEC, 0xA7, 0x57, 0xA3, 0x18, 0x30, 0x16, 0x30,
 0x14, 0x06, 0x05, 0x67, 0x81, 0x14, 0x01, 0x02,
 0x01, 0x01, 0xFF, 0x04, 0x08, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x01, 0x18, 0x21, 0x30, 0x0A, 0x06,
 0x08, 0x2A, 0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03,
 0x02, 0x03, 0x49, 0x00, 0x30, 0x46, 0x02, 0x21,
 0x00, 0xB1, 0xC0, 0x8E, 0x57, 0xAB, 0xC7, 0x45,
 0x34, 0x80, 0x49, 0x24, 0x2D, 0x5F, 0x59, 0x0B,
 0x93, 0x72, 0x36, 0x2C, 0x9C, 0x36, 0x07, 0xF7,
 0xB7, 0x39, 0x4B, 0xE7, 0xA1, 0x76, 0xC0, 0x8B,
 0xC1, 0x02, 0x21, 0x00, 0xA5, 0xA9, 0x58, 0xD9,
 0xD5, 0xE4, 0xB5, 0xB9, 0xA9, 0xA7, 0xD8, 0x73,
 0x81, 0x57, 0xF2, 0xF4, 0x07, 0x1F, 0xA9, 0xEE,
 0xE8, 0x91, 0x1A, 0xAA, 0xD7, 0x41, 0x0D, 0x20,
 0x42, 0x28, 0x14, 0xDE,

"""
